/* ------------------------------------------------------------------------- *\
    Button styles

    1. BaseButton    ... Structural styles for all buttons
    2. ButtonStyles  ... Visual styles for all buttons
    3. ButtonSizes   ... Different sizings for buttons
    4. ButtonStates  ... Styles for button states, e.g. active

    Buttons are expected to be used using the base style `.button` along
    with a modifier to give visual styling to the buttons.

    Example usage:

        <button class="button button--primary">Update Profile</button>
        <a class="button button--secondary button--large">Click</a>

\* ------------------------------------------------------------------------- */
@import 'mixins/tab-focus';
@import 'colors';
@import 'measurements';
@import 'mouse';
@import 'shadows';





/* ------------------------------------------------------------------------- *\
    #BaseButton

    Styles found here are for defining the standard button layouts.
    These base styles have been largely copied/modified from bootstrap:
    https://github.com/twbs/bootstrap/blob/v3.3.5/less/mixins/buttons.less
    https://github.com/twbs/bootstrap/blob/v3.3.5/less/buttons.less

    1. Since links can be styled as buttons we must remove the underline.
    2. Reset unusual Firefox-on-Android default style; see
        https://github.com/necolas/normalize.css/issues/214
    3. By default do not show a border, allow specific button types to
        override
    4. Buttons with long text should not explode outside their containers.
    5. Setting style specifically because user agent style sheets override
        the value that should cascade.
    6. Use the button-size mixin to keep implementation consistent between
        the button sizes and the default button.
    7. No matter the size all buttons should have the same outer margin.
    8. Keep the active button styles and the active button states in sync.
    9. Make the button "hover" above the page.
    10. Transition for shadow.
    11. Remove the default outline given by browsers.
    12. Match offset on right created by letter spacing.

\* ------------------------------------------------------------------------- */
.button {
    display: inline-block;
    text-align: center;
    text-decoration: none; /* [1] */
    text-transform: uppercase;
    vertical-align: middle;

    background-image: none; /* [2] */
    border: none; /* [3] */
    border-radius: @border-radius;
    font-weight: 600;
    letter-spacing: 1px;

    touch-action: manipulation;
    cursor: pointer;

    white-space: normal; /* [4] */
    font-size: 1rem; /* [5] */

    box-shadow: @shadow-default; /* [9] */
    transition: @shadow-raised-transition; /* [10] */
    outline: none; /* [11] */

    .button-size-mixin(@padding-small, @padding-default); /* [6] */
    .button-pulse-mixin();
    margin: @margin-extra-small @margin-small; /* [7] */

    &:active,
    &:hover,
    &:focus {
        text-decoration: none;
        .button--active; /* [8] */
    }

    & > span, & > t, & > i {
        margin-left: 1px; /* [12] */
    }
}





/* ------------------------------------------------------------------------- *\
    #Ripple
    These styles are needed to make the material "ripple" on click occur.
    When consuming it will need to be extended like so:

    .rippled-element {
        &:extend(.ripple);

        &:before {
            &:extend(.ripple-before);

            &:extend(.ripple-before--inverse); // only use on white backgrounds
        }

        &:active:before {
            &:extend(.ripple-active-before);
        }
    }

    Adapted from:
    https://github.com/mladenplavsic/css-ripple-effect/blob/master/ripple.css

    The ripple style should be extended or mixed into the element that needs
    to have a ripple effect.

    1. Change positioning so we can set the :before element specifically.
    2. Do not allow overflow, otherwise size of :before will break the page.
    3. Makes the element actual be viewable in an :before context
    4. Having padding and margin set when the transition happens
        causes the :before element to grow in size which is what makes the
        "ripple" effect. The top and left attributes are used to position
        the epicenter of the "ripple". Use percent width measurement to
        ensure the size of a button does not impact the ripple effect.
    5. Makes the ripple show up, must be used with .ripple-before
        and .ripple-active
    6. The solid opacity and instant transition are the final touches needed
        to produce the "ripple" effect.

    Note: Recommended to mix into :before so there is less conflict with
            font icon libraries.
\* ------------------------------------------------------------------------- */
.ripple {
    position: relative; /* [1] */
    overflow: hidden; /* [2] */
    will-change: opacity, transform;
}

.ripple-before {
    content: ""; /* [3] */
    display: block; /* [3] */
    background: rgba(255,255,255,0.3);
    position: absolute; /* [1] */
    border-radius: 50%;
    top: 90%; /* [4] */
    left: -15%; /* [4] */
    padding-top: 250%; /* [4] */
    padding-left: 250%; /* [4] */
    margin-top: -100%; /* [4] */
    margin-bottom: -100%; /* [4] */
    opacity: 0;
    transition: all .8s; /* [4] */
}

.ripple--inverse {
    background: rgba(0,0,0,0.3);
}

.ripple-active-before { /* [5] */
    padding-top: 0;
    padding-left: 0;
    margin-top: 0;
    margin-left: 0;
    opacity: 1; /* [6] */
    transition: 0s; /* [6] */
}





/* ------------------------------------------------------------------------- *\
    #ButtonStyles

    These classes are used to give buttons their specific look.

    Example usage:
        <a class="button button--primary">Primary Link</a>

    1. This color is tightly coupled to the color actually used
        inside the .background-color--inverse class.
    2. Added so default a:hover and a:focus styles do not force incorrect
       colors for links styled as buttons. This may be removed once those
       default selectors from bootstrap are gone.
    3. The ripple effect stops click event propogation in Safari browser.
       This will be fixed and re-enabled in SUPP-547.

\* ------------------------------------------------------------------------- */
.button-style-default () {
    /* [3] */

    /*
    .ripple();

    &:before {
        &:extend(.ripple-before);
    }

    &:active:before {
        &:extend(.ripple-active-before);
    }
    */
}

.button-style-mixin () {
    a&, /* [2] */
    a&:hover,
    a&:focus {
        .text-color;
    }
    .button-style-default();

    &:before {
        /* [3] */
        /* &:extend(.ripple--inverse); */
    }
}

.button-style-inverse-mixin () {
    a&, /* [2] */
    a&:hover,
    a&:focus {
        .text-color--inverse;
    }
    .button-style-default();
}

.button-pulse-mixin () {
    &.button--pulse {
        animation-name: pulse_animation;
        animation-duration: 1.5s;
        animation-delay: 1s;
        transform-origin: 70% 70%;
        animation-iteration-count: infinite;
        animation-timing-function: linear;
    }

    @keyframes pulse_animation {
        25% {
            transform: scale(1);
        }
        50% {
            transform: scale(1.04);
        }
        75% {
            transform: scale(1);
        }
    }
}

.button--default {
    background-color: @c2fo-page-background;
    color: @brand-info-dark;
    .button-style-mixin();
    .button-pulse-mixin();
}

.button--primary {
    &:extend(.background-color--primary);
    &:extend(.text-color--inverse);
    .button-style-inverse-mixin(); /* [1] */
}

.button--secondary {
    &:extend(.background-color--secondary);
    &:extend(.text-color--inverse);
    .button-style-inverse-mixin();
}

.button--inverse {
    &:extend(.background-color--inverse);
    &:extend(.text-color--inverse);
    .button-style-inverse-mixin();
}

.button--success {
    &:extend(.background-color--success);
    &:extend(.text-color--inverse);
    .button-style-inverse-mixin();
}

.button--info {
    &:extend(.background-color--info);
    &:extend(.text-color--inverse);
    .button-style-inverse-mixin();
}

.button--warning {
    &:extend(.background-color--warning);
    &:extend(.text-color--inverse);
    .button-style-inverse-mixin();
}

.button--critical {
    &:extend(.background-color--critical);
    &:extend(.text-color--inverse);
    .button-style-inverse-mixin();
}





/* ------------------------------------------------------------------------- *\
    #ButtonSizes

    These classes are used to increase the size of a button.

    Example usage:
        <a class="button button--primary button--large">Primary Link</a>

    The scale of the buttons is to half in size from the large button
    all the way down to the extra small button. This keeps the buttons
    looking good near each other and sizing different enough to have actual
    use cases for different button sizes.

\* ------------------------------------------------------------------------- */
.button-size-mixin(@vertical, @horizontal) {
    padding: @vertical @horizontal;
}

.button--large {
    .button-size-mixin(@padding-default, @padding-large);
    font-size: @font-large;
}

.button--small {
    .button-size-mixin(@padding-extra-small, @padding-small);
    font-size: @font-small;
}

.button--extra-small {
    .button-size-mixin(@padding-extra-small, @padding-extra-small);
    font-size: @font-extra-small;
}

.button--full {
    width: 100%;
    margin-left: 0;
    margin-right: 0;
}

.button--centered {
    display: block;
    margin-left: auto;
    margin-right: auto;
}

.button--icon {
    padding: @padding-extra-small @padding-extra-small;
    line-height: 0; /* [1] */
}

.button--material-icon {
    line-height: normal;
    text-indent: 0 !important;

    .material-icons {
        vertical-align: bottom;
        font-size: 18px;

    }
}

.button--flat {
    background: transparent;
    box-shadow: none;

    &:active,
    &:hover,
    &:focus {
        background: transparent;
        box-shadow: none;
    }
}





/* ------------------------------------------------------------------------- *\
    #ButtonStates

    These styles handle manually setting button states. If a button should
    appear to be active then use the .button--active class.

    1. Deactivated button should not indicate focus.
    2. Deactivated button should not remove border, this value is dependent
        on the original border color in .button

\* ------------------------------------------------------------------------- */
.button--active {
    box-shadow: @shadow-raised;
}

.button--disabled {
    cursor: @cursor-disabled;
    opacity: @opacity-disabled;
    box-shadow: none;

    &:active,
    &:focus,
    &:hover {
        .remove-tab-focus(); /* [1] */
        box-shadow: none; /* [1] */
        border-color: @color-black; /* [2] */
    }
}

.button-pulse-mixin () {
    &.button--pulse {
        animation-name: pulse_animation;
        animation-duration: 1.5s;
        animation-delay: 1s;
        transform-origin: 70% 70%;
        animation-iteration-count: infinite;
        animation-timing-function: linear;
    }

    @keyframes pulse_animation {
        25% {
            transform: scale(1);
        }
        50% {
            transform: scale(1.04);
        }
        75% {
            transform: scale(1);
        }
    }
}